// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override
// Mocks generated by Mockito 5.3.2 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mobile/app_manager.dart' as _i7;
import 'package:mobile/database/sqlite_data_manager.dart' as _i2;
import 'package:mobile/model/activity.dart' as _i9;
import 'package:mobile/model/session.dart' as _i10;
import 'package:mobile/model/summarized_activity.dart' as _i4;
import 'package:mobile/preferences_manager.dart' as _i3;
import 'package:mobile/utils/date_time_utils.dart' as _i5;
import 'package:mobile/widgets/activity_list_tile.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSQLiteDataManager_0 extends _i1.SmartFake
    implements _i2.SQLiteDataManager {
  _FakeSQLiteDataManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePreferencesManager_1 extends _i1.SmartFake
    implements _i3.PreferencesManager {
  _FakePreferencesManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSummarizedActivityList_2 extends _i1.SmartFake
    implements _i4.SummarizedActivityList {
  _FakeSummarizedActivityList_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDisplayDateRange_3 extends _i1.SmartFake
    implements _i5.DisplayDateRange {
  _FakeDisplayDateRange_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_4 extends _i1.SmartFake implements _i6.Database {
  _FakeDatabase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_5 extends _i1.SmartFake implements _i6.QueryCursor {
  _FakeQueryCursor_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_6 extends _i1.SmartFake implements _i6.Batch {
  _FakeBatch_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i7.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SQLiteDataManager get dataManager => (super.noSuchMethod(
        Invocation.getter(#dataManager),
        returnValue: _FakeSQLiteDataManager_0(
          this,
          Invocation.getter(#dataManager),
        ),
      ) as _i2.SQLiteDataManager);
  @override
  _i3.PreferencesManager get preferencesManager => (super.noSuchMethod(
        Invocation.getter(#preferencesManager),
        returnValue: _FakePreferencesManager_1(
          this,
          Invocation.getter(#preferencesManager),
        ),
      ) as _i3.PreferencesManager);
}

/// A class which mocks [SQLiteDataManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSQLiteDataManager extends _i1.Mock implements _i2.SQLiteDataManager {
  MockSQLiteDataManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<void> get activitiesUpdatedStream => (super.noSuchMethod(
        Invocation.getter(#activitiesUpdatedStream),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);
  @override
  _i8.Future<List<_i9.Activity>> get activities => (super.noSuchMethod(
        Invocation.getter(#activities),
        returnValue: _i8.Future<List<_i9.Activity>>.value(<_i9.Activity>[]),
      ) as _i8.Future<List<_i9.Activity>>);
  @override
  _i8.Future<int> get activityCount => (super.noSuchMethod(
        Invocation.getter(#activityCount),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<List<_i10.Session>> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: _i8.Future<List<_i10.Session>>.value(<_i10.Session>[]),
      ) as _i8.Future<List<_i10.Session>>);
  @override
  _i8.Future<int> get sessionCount => (super.noSuchMethod(
        Invocation.getter(#sessionCount),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<void> initialize(
    _i7.AppManager? app, [
    _i6.Database? database,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            app,
            database,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<bool> clearDatabase() => (super.noSuchMethod(
        Invocation.method(
          #clearDatabase,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Stream<void> getSessionsUpdatedStream(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsUpdatedStream,
          [activityId],
        ),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);
  @override
  _i8.Future<List<_i9.Activity>> getActivities(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivities,
          [ids],
        ),
        returnValue: _i8.Future<List<_i9.Activity>>.value(<_i9.Activity>[]),
      ) as _i8.Future<List<_i9.Activity>>);
  @override
  void addActivity(_i9.Activity? activity) => super.noSuchMethod(
        Invocation.method(
          #addActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> addActivities(
    List<_i9.Activity>? activityList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addActivities,
          [activityList],
          {#notify: notify},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void updateActivity(_i9.Activity? activity) => super.noSuchMethod(
        Invocation.method(
          #updateActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeActivity(String? activityId) => super.noSuchMethod(
        Invocation.method(
          #removeActivity,
          [activityId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> addSessions(
    List<_i10.Session>? sessionList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSessions,
          [sessionList],
          {#notify: notify},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<String?> startSession(_i9.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSession,
          [activity],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
  @override
  _i8.Future<void> endSession(_i9.Activity? activity) => (super.noSuchMethod(
        Invocation.method(
          #endSession,
          [activity],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void addSession(_i10.Session? session) => super.noSuchMethod(
        Invocation.method(
          #addSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateSession(_i10.Session? session) => super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeSession(_i10.Session? session) => super.noSuchMethod(
        Invocation.method(
          #removeSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<List<_i10.Session>> getSessions(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessions,
          [activityId],
        ),
        returnValue: _i8.Future<List<_i10.Session>>.value(<_i10.Session>[]),
      ) as _i8.Future<List<_i10.Session>>);
  @override
  _i8.Future<List<_i10.Session>> getRecentSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentSessions,
          [
            activityId,
            limit,
          ],
        ),
        returnValue: _i8.Future<List<_i10.Session>>.value(<_i10.Session>[]),
      ) as _i8.Future<List<_i10.Session>>);
  @override
  _i8.Future<int> getSessionCount(String? activityId) => (super.noSuchMethod(
        Invocation.method(
          #getSessionCount,
          [activityId],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<_i10.Session?> getOverlappingSession(_i10.Session? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOverlappingSession,
          [session],
        ),
        returnValue: _i8.Future<_i10.Session?>.value(),
      ) as _i8.Future<_i10.Session?>);
  @override
  _i8.Future<List<_i10.Session>> getLimitedSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLimitedSessions,
          [
            activityId,
            limit,
          ],
        ),
        returnValue: _i8.Future<List<_i10.Session>>.value(<_i10.Session>[]),
      ) as _i8.Future<List<_i10.Session>>);
  @override
  _i8.Future<_i10.Session?> getSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSession,
          [sessionId],
        ),
        returnValue: _i8.Future<_i10.Session?>.value(),
      ) as _i8.Future<_i10.Session?>);
  @override
  _i8.Future<bool> activityNameExists(String? name) => (super.noSuchMethod(
        Invocation.method(
          #activityNameExists,
          [name],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<_i4.SummarizedActivityList> getSummarizedActivities(
    _i5.DisplayDateRange? displayDateRange, [
    List<_i9.Activity>? activityList = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummarizedActivities,
          [
            displayDateRange,
            activityList,
          ],
        ),
        returnValue: _i8.Future<_i4.SummarizedActivityList>.value(
            _FakeSummarizedActivityList_2(
          this,
          Invocation.method(
            #getSummarizedActivities,
            [
              displayDateRange,
              activityList,
            ],
          ),
        )),
      ) as _i8.Future<_i4.SummarizedActivityList>);
  @override
  _i8.Future<List<_i11.ActivityListTileModel>> getActivityListModel(
          {required _i5.DateRange? dateRange}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivityListModel,
          [],
          {#dateRange: dateRange},
        ),
        returnValue: _i8.Future<List<_i11.ActivityListTileModel>>.value(
            <_i11.ActivityListTileModel>[]),
      ) as _i8.Future<List<_i11.ActivityListTileModel>>);
}

/// A class which mocks [PreferencesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesManager extends _i1.Mock
    implements _i3.PreferencesManager {
  MockPreferencesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<void> get homeDateRangeStream => (super.noSuchMethod(
        Invocation.getter(#homeDateRangeStream),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);
  @override
  _i5.DurationUnit get largestDurationUnit => (super.noSuchMethod(
        Invocation.getter(#largestDurationUnit),
        returnValue: _i5.DurationUnit.days,
      ) as _i5.DurationUnit);
  @override
  _i5.DisplayDateRange get homeDateRange => (super.noSuchMethod(
        Invocation.getter(#homeDateRange),
        returnValue: _FakeDisplayDateRange_3(
          this,
          Invocation.getter(#homeDateRange),
        ),
      ) as _i5.DisplayDateRange);
  @override
  List<String> get statsSelectedActivityIds => (super.noSuchMethod(
        Invocation.getter(#statsSelectedActivityIds),
        returnValue: <String>[],
      ) as List<String>);
  @override
  _i5.DisplayDateRange get statsDateRange => (super.noSuchMethod(
        Invocation.getter(#statsDateRange),
        returnValue: _FakeDisplayDateRange_3(
          this,
          Invocation.getter(#statsDateRange),
        ),
      ) as _i5.DisplayDateRange);
  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void setLargestDurationUnit(_i5.DurationUnit? unit) => super.noSuchMethod(
        Invocation.method(
          #setLargestDurationUnit,
          [unit],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setHomeDateRange(_i5.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(
          #setHomeDateRange,
          [range],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setStatsSelectedActivityIds(List<String>? ids) => super.noSuchMethod(
        Invocation.method(
          #setStatsSelectedActivityIds,
          [ids],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setStatsDateRange(_i5.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(
          #setStatsDateRange,
          [range],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i6.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  _i6.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i6.Database);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<T> transaction<T>(
    _i8.Future<T> Function(_i6.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i8.Future<T>.value(null),
      ) as _i8.Future<T>);
  @override
  _i8.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i8.Future<T>.value(null),
      ) as _i8.Future<T>);
  @override
  _i8.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<T>.value(null),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i8.Future<List<Map<String, Object?>>>);
  @override
  _i8.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i8.Future<List<Map<String, Object?>>>);
  @override
  _i8.Future<_i6.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i8.Future<_i6.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i8.Future<_i6.QueryCursor>);
  @override
  _i8.Future<_i6.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i8.Future<_i6.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i8.Future<_i6.QueryCursor>);
  @override
  _i8.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i6.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_6(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i6.Batch);
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i6.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);
  @override
  _i8.Future<List<Object?>> commit({
    bool? exclusive,
    bool? noResult,
    bool? continueOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
          {
            #exclusive: exclusive,
            #noResult: noResult,
            #continueOnError: continueOnError,
          },
        ),
        returnValue: _i8.Future<List<Object?>>.value(<Object?>[]),
      ) as _i8.Future<List<Object?>>);
  @override
  _i8.Future<List<Object?>> apply({
    bool? noResult,
    bool? continueOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #apply,
          [],
          {
            #noResult: noResult,
            #continueOnError: continueOnError,
          },
        ),
        returnValue: _i8.Future<List<Object?>>.value(<Object?>[]),
      ) as _i8.Future<List<Object?>>);
  @override
  void rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i6.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
