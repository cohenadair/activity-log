// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override
// Mocks generated by Mockito 5.4.0 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i15;
import 'dart:convert' as _i20;

import 'package:device_info_plus/device_info_plus.dart' as _i11;
import 'package:http/http.dart' as _i13;
import 'package:mobile/app_manager.dart' as _i16;
import 'package:mobile/database/sqlite_data_manager.dart' as _i2;
import 'package:mobile/device_info_wrapper.dart' as _i5;
import 'package:mobile/http_wrapper.dart' as _i8;
import 'package:mobile/io_wrapper.dart' as _i6;
import 'package:mobile/model/activity.dart' as _i17;
import 'package:mobile/model/session.dart' as _i18;
import 'package:mobile/model/summarized_activity.dart' as _i9;
import 'package:mobile/package_info_wrapper.dart' as _i7;
import 'package:mobile/preferences_manager.dart' as _i3;
import 'package:mobile/properties_manager.dart' as _i4;
import 'package:mobile/utils/date_time_utils.dart' as _i10;
import 'package:mobile/widgets/activity_list_tile.dart' as _i19;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSQLiteDataManager_0 extends _i1.SmartFake
    implements _i2.SQLiteDataManager {
  _FakeSQLiteDataManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePreferencesManager_1 extends _i1.SmartFake
    implements _i3.PreferencesManager {
  _FakePreferencesManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePropertiesManager_2 extends _i1.SmartFake
    implements _i4.PropertiesManager {
  _FakePropertiesManager_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceInfoWrapper_3 extends _i1.SmartFake
    implements _i5.DeviceInfoWrapper {
  _FakeDeviceInfoWrapper_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIoWrapper_4 extends _i1.SmartFake implements _i6.IoWrapper {
  _FakeIoWrapper_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfoWrapper_5 extends _i1.SmartFake
    implements _i7.PackageInfoWrapper {
  _FakePackageInfoWrapper_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpWrapper_6 extends _i1.SmartFake implements _i8.HttpWrapper {
  _FakeHttpWrapper_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSummarizedActivityList_7 extends _i1.SmartFake
    implements _i9.SummarizedActivityList {
  _FakeSummarizedActivityList_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDisplayDateRange_8 extends _i1.SmartFake
    implements _i10.DisplayDateRange {
  _FakeDisplayDateRange_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDeviceInfo_9 extends _i1.SmartFake
    implements _i11.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_10 extends _i1.SmartFake
    implements _i11.IosDeviceInfo {
  _FakeIosDeviceInfo_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfo_11 extends _i1.SmartFake implements _i12.PackageInfo {
  _FakePackageInfo_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_12 extends _i1.SmartFake implements _i13.Response {
  _FakeResponse_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_13 extends _i1.SmartFake implements _i14.Database {
  _FakeDatabase_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_14<T> extends _i1.SmartFake implements _i15.Future<T> {
  _FakeFuture_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_15 extends _i1.SmartFake implements _i14.QueryCursor {
  _FakeQueryCursor_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_16 extends _i1.SmartFake implements _i14.Batch {
  _FakeBatch_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidBuildVersion_17 extends _i1.SmartFake
    implements _i11.AndroidBuildVersion {
  _FakeAndroidBuildVersion_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDisplayMetrics_18 extends _i1.SmartFake
    implements _i11.AndroidDisplayMetrics {
  _FakeAndroidDisplayMetrics_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosUtsname_19 extends _i1.SmartFake implements _i11.IosUtsname {
  _FakeIosUtsname_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i16.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SQLiteDataManager get dataManager => (super.noSuchMethod(
        Invocation.getter(#dataManager),
        returnValue: _FakeSQLiteDataManager_0(
          this,
          Invocation.getter(#dataManager),
        ),
      ) as _i2.SQLiteDataManager);
  @override
  _i3.PreferencesManager get preferencesManager => (super.noSuchMethod(
        Invocation.getter(#preferencesManager),
        returnValue: _FakePreferencesManager_1(
          this,
          Invocation.getter(#preferencesManager),
        ),
      ) as _i3.PreferencesManager);
  @override
  _i4.PropertiesManager get propertiesManager => (super.noSuchMethod(
        Invocation.getter(#propertiesManager),
        returnValue: _FakePropertiesManager_2(
          this,
          Invocation.getter(#propertiesManager),
        ),
      ) as _i4.PropertiesManager);
  @override
  _i5.DeviceInfoWrapper get deviceInfoWrapper => (super.noSuchMethod(
        Invocation.getter(#deviceInfoWrapper),
        returnValue: _FakeDeviceInfoWrapper_3(
          this,
          Invocation.getter(#deviceInfoWrapper),
        ),
      ) as _i5.DeviceInfoWrapper);
  @override
  _i6.IoWrapper get ioWrapper => (super.noSuchMethod(
        Invocation.getter(#ioWrapper),
        returnValue: _FakeIoWrapper_4(
          this,
          Invocation.getter(#ioWrapper),
        ),
      ) as _i6.IoWrapper);
  @override
  _i7.PackageInfoWrapper get packageInfoWrapper => (super.noSuchMethod(
        Invocation.getter(#packageInfoWrapper),
        returnValue: _FakePackageInfoWrapper_5(
          this,
          Invocation.getter(#packageInfoWrapper),
        ),
      ) as _i7.PackageInfoWrapper);
  @override
  _i8.HttpWrapper get httpWrapper => (super.noSuchMethod(
        Invocation.getter(#httpWrapper),
        returnValue: _FakeHttpWrapper_6(
          this,
          Invocation.getter(#httpWrapper),
        ),
      ) as _i8.HttpWrapper);
}

/// A class which mocks [SQLiteDataManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSQLiteDataManager extends _i1.Mock implements _i2.SQLiteDataManager {
  MockSQLiteDataManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Stream<void> get activitiesUpdatedStream => (super.noSuchMethod(
        Invocation.getter(#activitiesUpdatedStream),
        returnValue: _i15.Stream<void>.empty(),
      ) as _i15.Stream<void>);
  @override
  _i15.Future<List<_i17.Activity>> get activities => (super.noSuchMethod(
        Invocation.getter(#activities),
        returnValue: _i15.Future<List<_i17.Activity>>.value(<_i17.Activity>[]),
      ) as _i15.Future<List<_i17.Activity>>);
  @override
  _i15.Future<int> get activityCount => (super.noSuchMethod(
        Invocation.getter(#activityCount),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<List<_i18.Session>> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: _i15.Future<List<_i18.Session>>.value(<_i18.Session>[]),
      ) as _i15.Future<List<_i18.Session>>);
  @override
  _i15.Future<int> get sessionCount => (super.noSuchMethod(
        Invocation.getter(#sessionCount),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<void> initialize(
    _i16.AppManager? app, [
    _i14.Database? database,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            app,
            database,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<bool> clearDatabase() => (super.noSuchMethod(
        Invocation.method(
          #clearDatabase,
          [],
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);
  @override
  _i15.Stream<void> getSessionsUpdatedStream(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsUpdatedStream,
          [activityId],
        ),
        returnValue: _i15.Stream<void>.empty(),
      ) as _i15.Stream<void>);
  @override
  _i15.Future<List<_i17.Activity>> getActivities(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivities,
          [ids],
        ),
        returnValue: _i15.Future<List<_i17.Activity>>.value(<_i17.Activity>[]),
      ) as _i15.Future<List<_i17.Activity>>);
  @override
  void addActivity(_i17.Activity? activity) => super.noSuchMethod(
        Invocation.method(
          #addActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<void> addActivities(
    List<_i17.Activity>? activityList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addActivities,
          [activityList],
          {#notify: notify},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  void updateActivity(_i17.Activity? activity) => super.noSuchMethod(
        Invocation.method(
          #updateActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeActivity(String? activityId) => super.noSuchMethod(
        Invocation.method(
          #removeActivity,
          [activityId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<void> addSessions(
    List<_i18.Session>? sessionList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSessions,
          [sessionList],
          {#notify: notify},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<String?> startSession(_i17.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSession,
          [activity],
        ),
        returnValue: _i15.Future<String?>.value(),
      ) as _i15.Future<String?>);
  @override
  _i15.Future<void> endSession(_i17.Activity? activity) => (super.noSuchMethod(
        Invocation.method(
          #endSession,
          [activity],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  void addSession(_i18.Session? session) => super.noSuchMethod(
        Invocation.method(
          #addSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateSession(_i18.Session? session) => super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeSession(_i18.Session? session) => super.noSuchMethod(
        Invocation.method(
          #removeSession,
          [session],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<List<_i18.Session>> getSessions(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessions,
          [activityId],
        ),
        returnValue: _i15.Future<List<_i18.Session>>.value(<_i18.Session>[]),
      ) as _i15.Future<List<_i18.Session>>);
  @override
  _i15.Future<List<_i18.Session>> getRecentSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentSessions,
          [
            activityId,
            limit,
          ],
        ),
        returnValue: _i15.Future<List<_i18.Session>>.value(<_i18.Session>[]),
      ) as _i15.Future<List<_i18.Session>>);
  @override
  _i15.Future<int> getSessionCount(String? activityId) => (super.noSuchMethod(
        Invocation.method(
          #getSessionCount,
          [activityId],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<_i18.Session?> getOverlappingSession(_i18.Session? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOverlappingSession,
          [session],
        ),
        returnValue: _i15.Future<_i18.Session?>.value(),
      ) as _i15.Future<_i18.Session?>);
  @override
  _i15.Future<List<_i18.Session>> getLimitedSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLimitedSessions,
          [
            activityId,
            limit,
          ],
        ),
        returnValue: _i15.Future<List<_i18.Session>>.value(<_i18.Session>[]),
      ) as _i15.Future<List<_i18.Session>>);
  @override
  _i15.Future<_i18.Session?> getSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSession,
          [sessionId],
        ),
        returnValue: _i15.Future<_i18.Session?>.value(),
      ) as _i15.Future<_i18.Session?>);
  @override
  _i15.Future<bool> activityNameExists(String? name) => (super.noSuchMethod(
        Invocation.method(
          #activityNameExists,
          [name],
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);
  @override
  _i15.Future<_i9.SummarizedActivityList> getSummarizedActivities(
    _i10.DisplayDateRange? displayDateRange, [
    List<_i17.Activity>? activities = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummarizedActivities,
          [
            displayDateRange,
            activities,
          ],
        ),
        returnValue: _i15.Future<_i9.SummarizedActivityList>.value(
            _FakeSummarizedActivityList_7(
          this,
          Invocation.method(
            #getSummarizedActivities,
            [
              displayDateRange,
              activities,
            ],
          ),
        )),
      ) as _i15.Future<_i9.SummarizedActivityList>);
  @override
  _i15.Future<List<_i19.ActivityListTileModel>> getActivityListModel(
          {required _i10.DateRange? dateRange}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivityListModel,
          [],
          {#dateRange: dateRange},
        ),
        returnValue: _i15.Future<List<_i19.ActivityListTileModel>>.value(
            <_i19.ActivityListTileModel>[]),
      ) as _i15.Future<List<_i19.ActivityListTileModel>>);
}

/// A class which mocks [PreferencesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesManager extends _i1.Mock
    implements _i3.PreferencesManager {
  MockPreferencesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Stream<void> get homeDateRangeStream => (super.noSuchMethod(
        Invocation.getter(#homeDateRangeStream),
        returnValue: _i15.Stream<void>.empty(),
      ) as _i15.Stream<void>);
  @override
  _i10.DurationUnit get largestDurationUnit => (super.noSuchMethod(
        Invocation.getter(#largestDurationUnit),
        returnValue: _i10.DurationUnit.days,
      ) as _i10.DurationUnit);
  @override
  _i10.DisplayDateRange get homeDateRange => (super.noSuchMethod(
        Invocation.getter(#homeDateRange),
        returnValue: _FakeDisplayDateRange_8(
          this,
          Invocation.getter(#homeDateRange),
        ),
      ) as _i10.DisplayDateRange);
  @override
  List<String> get statsSelectedActivityIds => (super.noSuchMethod(
        Invocation.getter(#statsSelectedActivityIds),
        returnValue: <String>[],
      ) as List<String>);
  @override
  _i10.DisplayDateRange get statsDateRange => (super.noSuchMethod(
        Invocation.getter(#statsDateRange),
        returnValue: _FakeDisplayDateRange_8(
          this,
          Invocation.getter(#statsDateRange),
        ),
      ) as _i10.DisplayDateRange);
  @override
  _i15.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  void setLargestDurationUnit(_i10.DurationUnit? unit) => super.noSuchMethod(
        Invocation.method(
          #setLargestDurationUnit,
          [unit],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setHomeDateRange(_i10.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(
          #setHomeDateRange,
          [range],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setStatsSelectedActivityIds(List<String>? ids) => super.noSuchMethod(
        Invocation.method(
          #setStatsSelectedActivityIds,
          [ids],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setStatsDateRange(_i10.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(
          #setStatsDateRange,
          [range],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setUserInfo(
    String? name,
    String? email,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserInfo,
          [
            name,
            email,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PropertiesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertiesManager extends _i1.Mock implements _i4.PropertiesManager {
  MockPropertiesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get clientSenderEmail => (super.noSuchMethod(
        Invocation.getter(#clientSenderEmail),
        returnValue: '',
      ) as String);
  @override
  String get supportEmail => (super.noSuchMethod(
        Invocation.getter(#supportEmail),
        returnValue: '',
      ) as String);
  @override
  String get sendGridApiKey => (super.noSuchMethod(
        Invocation.getter(#sendGridApiKey),
        returnValue: '',
      ) as String);
  @override
  String get feedbackTemplate => (super.noSuchMethod(
        Invocation.getter(#feedbackTemplate),
        returnValue: '',
      ) as String);
  @override
  _i15.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [DeviceInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoWrapper extends _i1.Mock implements _i5.DeviceInfoWrapper {
  MockDeviceInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i11.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i15.Future<_i11.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_9(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i15.Future<_i11.AndroidDeviceInfo>);
  @override
  _i15.Future<_i11.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue:
            _i15.Future<_i11.IosDeviceInfo>.value(_FakeIosDeviceInfo_10(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i15.Future<_i11.IosDeviceInfo>);
}

/// A class which mocks [IoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIoWrapper extends _i1.Mock implements _i6.IoWrapper {
  MockIoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);
  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);
  @override
  _i15.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i7.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i12.PackageInfo> fromPlatform() => (super.noSuchMethod(
        Invocation.method(
          #fromPlatform,
          [],
        ),
        returnValue: _i15.Future<_i12.PackageInfo>.value(_FakePackageInfo_11(
          this,
          Invocation.method(
            #fromPlatform,
            [],
          ),
        )),
      ) as _i15.Future<_i12.PackageInfo>);
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i8.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i13.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i15.Future<_i13.Response>.value(_FakeResponse_12(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i15.Future<_i13.Response>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i14.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  _i14.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_13(
          this,
          Invocation.getter(#database),
        ),
      ) as _i14.Database);
  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<T> transaction<T>(
    _i15.Future<T> Function(_i14.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _FakeFuture_14<T>(
          this,
          Invocation.method(
            #transaction,
            [action],
            {#exclusive: exclusive},
          ),
        ),
      ) as _i15.Future<T>);
  @override
  _i15.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _FakeFuture_14<T>(
          this,
          Invocation.method(
            #devInvokeMethod,
            [
              method,
              arguments,
            ],
          ),
        ),
      ) as _i15.Future<T>);
  @override
  _i15.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _FakeFuture_14<T>(
          this,
          Invocation.method(
            #devInvokeSqlMethod,
            [
              method,
              sql,
              arguments,
            ],
          ),
        ),
      ) as _i15.Future<T>);
  @override
  _i15.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i14.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i15.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i15.Future<List<Map<String, Object?>>>);
  @override
  _i15.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i15.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i15.Future<List<Map<String, Object?>>>);
  @override
  _i15.Future<_i14.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i15.Future<_i14.QueryCursor>.value(_FakeQueryCursor_15(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i15.Future<_i14.QueryCursor>);
  @override
  _i15.Future<_i14.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i15.Future<_i14.QueryCursor>.value(_FakeQueryCursor_15(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i15.Future<_i14.QueryCursor>);
  @override
  _i15.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i14.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i15.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);
  @override
  _i14.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_16(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i14.Batch);
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i14.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);
  @override
  _i15.Future<List<Object?>> commit({
    bool? exclusive,
    bool? noResult,
    bool? continueOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
          {
            #exclusive: exclusive,
            #noResult: noResult,
            #continueOnError: continueOnError,
          },
        ),
        returnValue: _i15.Future<List<Object?>>.value(<Object?>[]),
      ) as _i15.Future<List<Object?>>);
  @override
  _i15.Future<List<Object?>> apply({
    bool? noResult,
    bool? continueOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #apply,
          [],
          {
            #noResult: noResult,
            #continueOnError: continueOnError,
          },
        ),
        returnValue: _i15.Future<List<Object?>>.value(<Object?>[]),
      ) as _i15.Future<List<Object?>>);
  @override
  void rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i14.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i14.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i11.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename => (super.noSuchMethod(
        Invocation.getter(#codename),
        returnValue: '',
      ) as String);
  @override
  String get incremental => (super.noSuchMethod(
        Invocation.getter(#incremental),
        returnValue: '',
      ) as String);
  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: '',
      ) as String);
  @override
  int get sdkInt => (super.noSuchMethod(
        Invocation.getter(#sdkInt),
        returnValue: 0,
      ) as int);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i11.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.AndroidBuildVersion get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _FakeAndroidBuildVersion_17(
          this,
          Invocation.getter(#version),
        ),
      ) as _i11.AndroidBuildVersion);
  @override
  String get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: '',
      ) as String);
  @override
  String get bootloader => (super.noSuchMethod(
        Invocation.getter(#bootloader),
        returnValue: '',
      ) as String);
  @override
  String get brand => (super.noSuchMethod(
        Invocation.getter(#brand),
        returnValue: '',
      ) as String);
  @override
  String get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: '',
      ) as String);
  @override
  String get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: '',
      ) as String);
  @override
  String get fingerprint => (super.noSuchMethod(
        Invocation.getter(#fingerprint),
        returnValue: '',
      ) as String);
  @override
  String get hardware => (super.noSuchMethod(
        Invocation.getter(#hardware),
        returnValue: '',
      ) as String);
  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: '',
      ) as String);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get manufacturer => (super.noSuchMethod(
        Invocation.getter(#manufacturer),
        returnValue: '',
      ) as String);
  @override
  String get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: '',
      ) as String);
  @override
  String get product => (super.noSuchMethod(
        Invocation.getter(#product),
        returnValue: '',
      ) as String);
  @override
  List<String> get supported32BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported32BitAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  List<String> get supported64BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported64BitAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  List<String> get supportedAbis => (super.noSuchMethod(
        Invocation.getter(#supportedAbis),
        returnValue: <String>[],
      ) as List<String>);
  @override
  String get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: '',
      ) as String);
  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: '',
      ) as String);
  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);
  @override
  List<String> get systemFeatures => (super.noSuchMethod(
        Invocation.getter(#systemFeatures),
        returnValue: <String>[],
      ) as List<String>);
  @override
  _i11.AndroidDisplayMetrics get displayMetrics => (super.noSuchMethod(
        Invocation.getter(#displayMetrics),
        returnValue: _FakeAndroidDisplayMetrics_18(
          this,
          Invocation.getter(#displayMetrics),
        ),
      ) as _i11.AndroidDisplayMetrics);
  @override
  String get serialNumber => (super.noSuchMethod(
        Invocation.getter(#serialNumber),
        returnValue: '',
      ) as String);
  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [IosDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIosDeviceInfo extends _i1.Mock implements _i11.IosDeviceInfo {
  MockIosDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);
  @override
  _i11.IosUtsname get utsname => (super.noSuchMethod(
        Invocation.getter(#utsname),
        returnValue: _FakeIosUtsname_19(
          this,
          Invocation.getter(#utsname),
        ),
      ) as _i11.IosUtsname);
  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
