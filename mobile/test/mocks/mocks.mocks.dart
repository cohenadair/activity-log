// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override
// Mocks generated by Mockito 5.4.5 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i21;

import 'package:adair_flutter_lib/utils/date_range.dart' as _i3;
import 'package:device_info_plus/device_info_plus.dart' as _i4;
import 'package:flutter/material.dart' as _i10;
import 'package:http/http.dart' as _i6;
import 'package:mobile/database/data_manager.dart' as _i13;
import 'package:mobile/device_info_wrapper.dart' as _i18;
import 'package:mobile/http_wrapper.dart' as _i20;
import 'package:mobile/model/activity.dart' as _i11;
import 'package:mobile/model/session.dart' as _i14;
import 'package:mobile/model/summarized_activity.dart' as _i2;
import 'package:mobile/package_info_wrapper.dart' as _i19;
import 'package:mobile/preferences_manager.dart' as _i16;
import 'package:mobile/utils/duration.dart' as _i17;
import 'package:mobile/widgets/activity_list_tile.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:package_info_plus/package_info_plus.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i7;
import 'package:timezone/timezone.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSummarizedActivityList_0 extends _i1.SmartFake
    implements _i2.SummarizedActivityList {
  _FakeSummarizedActivityList_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDisplayDateRange_1 extends _i1.SmartFake
    implements _i3.DisplayDateRange {
  _FakeDisplayDateRange_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAndroidDeviceInfo_2 extends _i1.SmartFake
    implements _i4.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIosDeviceInfo_3 extends _i1.SmartFake implements _i4.IosDeviceInfo {
  _FakeIosDeviceInfo_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePackageInfo_4 extends _i1.SmartFake implements _i5.PackageInfo {
  _FakePackageInfo_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResponse_5 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDatabase_6 extends _i1.SmartFake implements _i7.Database {
  _FakeDatabase_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFuture_7<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQueryCursor_8 extends _i1.SmartFake implements _i7.QueryCursor {
  _FakeQueryCursor_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBatch_9 extends _i1.SmartFake implements _i7.Batch {
  _FakeBatch_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAndroidBuildVersion_10 extends _i1.SmartFake
    implements _i4.AndroidBuildVersion {
  _FakeAndroidBuildVersion_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIosUtsname_11 extends _i1.SmartFake implements _i4.IosUtsname {
  _FakeIosUtsname_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDuration_12 extends _i1.SmartFake implements Duration {
  _FakeDuration_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTZDateTime_13 extends _i1.SmartFake implements _i9.TZDateTime {
  _FakeTZDateTime_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTimeOfDay_14 extends _i1.SmartFake implements _i10.TimeOfDay {
  _FakeTimeOfDay_14(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Activity].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivity extends _i1.Mock implements _i11.Activity {
  MockActivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
      ) as String);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(#toMap, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [DataManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataManager extends _i1.Mock implements _i13.DataManager {
  MockDataManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<void> get activitiesUpdatedStream => (super.noSuchMethod(
        Invocation.getter(#activitiesUpdatedStream),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Future<List<_i11.Activity>> get activities => (super.noSuchMethod(
        Invocation.getter(#activities),
        returnValue: _i8.Future<List<_i11.Activity>>.value(
          <_i11.Activity>[],
        ),
      ) as _i8.Future<List<_i11.Activity>>);

  @override
  _i8.Future<int> get activityCount => (super.noSuchMethod(
        Invocation.getter(#activityCount),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<_i14.Session>> get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: _i8.Future<List<_i14.Session>>.value(<_i14.Session>[]),
      ) as _i8.Future<List<_i14.Session>>);

  @override
  _i8.Future<int> get sessionCount => (super.noSuchMethod(
        Invocation.getter(#sessionCount),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> init([_i7.Database? database]) => (super.noSuchMethod(
        Invocation.method(#init, [database]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> clearDatabase() => (super.noSuchMethod(
        Invocation.method(#clearDatabase, []),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Stream<void> getSessionsUpdatedStream(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(#getSessionsUpdatedStream, [activityId]),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Future<_i11.Activity?> activity(String? id) => (super.noSuchMethod(
        Invocation.method(#activity, [id]),
        returnValue: _i8.Future<_i11.Activity?>.value(),
      ) as _i8.Future<_i11.Activity?>);

  @override
  _i8.Future<List<_i11.Activity>> getActivities(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(#getActivities, [ids]),
        returnValue: _i8.Future<List<_i11.Activity>>.value(
          <_i11.Activity>[],
        ),
      ) as _i8.Future<List<_i11.Activity>>);

  @override
  void addActivity(_i11.Activity? activity) => super.noSuchMethod(
        Invocation.method(#addActivity, [activity]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> addActivities(
    List<_i11.Activity>? activityList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addActivities,
          [activityList],
          {#notify: notify},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void updateActivity(_i11.Activity? activity) => super.noSuchMethod(
        Invocation.method(#updateActivity, [activity]),
        returnValueForMissingStub: null,
      );

  @override
  void removeActivity(String? activityId) => super.noSuchMethod(
        Invocation.method(#removeActivity, [activityId]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> addSessions(
    List<_i14.Session>? sessionList, {
    bool? notify = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#addSessions, [sessionList], {#notify: notify}),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> startSession(_i11.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(#startSession, [activity]),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> endSession(_i11.Activity? activity) => (super.noSuchMethod(
        Invocation.method(#endSession, [activity]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addSession(_i14.Session? session) => super.noSuchMethod(
        Invocation.method(#addSession, [session]),
        returnValueForMissingStub: null,
      );

  @override
  void updateSession(_i14.Session? session) => super.noSuchMethod(
        Invocation.method(#updateSession, [session]),
        returnValueForMissingStub: null,
      );

  @override
  void removeSession(_i14.Session? session) => super.noSuchMethod(
        Invocation.method(#removeSession, [session]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<List<_i14.Session>> getSessions(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(#getSessions, [activityId]),
        returnValue: _i8.Future<List<_i14.Session>>.value(<_i14.Session>[]),
      ) as _i8.Future<List<_i14.Session>>);

  @override
  _i8.Future<_i14.Session?> inProgressSession(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(#inProgressSession, [activityId]),
        returnValue: _i8.Future<_i14.Session?>.value(),
      ) as _i8.Future<_i14.Session?>);

  @override
  _i8.Future<List<_i14.Session>> getRecentSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#getRecentSessions, [activityId, limit]),
        returnValue: _i8.Future<List<_i14.Session>>.value(<_i14.Session>[]),
      ) as _i8.Future<List<_i14.Session>>);

  @override
  _i8.Future<int> getSessionCount(String? activityId) => (super.noSuchMethod(
        Invocation.method(#getSessionCount, [activityId]),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<_i14.Session?> getOverlappingSession(_i14.Session? session) =>
      (super.noSuchMethod(
        Invocation.method(#getOverlappingSession, [session]),
        returnValue: _i8.Future<_i14.Session?>.value(),
      ) as _i8.Future<_i14.Session?>);

  @override
  _i8.Future<List<_i14.Session>> getLimitedSessions(
    String? activityId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#getLimitedSessions, [activityId, limit]),
        returnValue: _i8.Future<List<_i14.Session>>.value(<_i14.Session>[]),
      ) as _i8.Future<List<_i14.Session>>);

  @override
  _i8.Future<_i14.Session?> getSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(#getSession, [sessionId]),
        returnValue: _i8.Future<_i14.Session?>.value(),
      ) as _i8.Future<_i14.Session?>);

  @override
  _i8.Future<bool> activityNameExists(String? name) => (super.noSuchMethod(
        Invocation.method(#activityNameExists, [name]),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i2.SummarizedActivityList> getSummarizedActivities(
    _i3.DisplayDateRange? displayDateRange, [
    List<_i11.Activity>? activities = const [],
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#getSummarizedActivities, [
          displayDateRange,
          activities,
        ]),
        returnValue: _i8.Future<_i2.SummarizedActivityList>.value(
          _FakeSummarizedActivityList_0(
            this,
            Invocation.method(#getSummarizedActivities, [
              displayDateRange,
              activities,
            ]),
          ),
        ),
      ) as _i8.Future<_i2.SummarizedActivityList>);

  @override
  _i8.Future<List<_i15.ActivityListTileModel>> getActivityListModel({
    required _i3.DateRange? dateRange,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getActivityListModel, [], {
          #dateRange: dateRange,
        }),
        returnValue: _i8.Future<List<_i15.ActivityListTileModel>>.value(
          <_i15.ActivityListTileModel>[],
        ),
      ) as _i8.Future<List<_i15.ActivityListTileModel>>);
}

/// A class which mocks [PreferencesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesManager extends _i1.Mock
    implements _i16.PreferencesManager {
  MockPreferencesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<void> get largestDurationUnitStream => (super.noSuchMethod(
        Invocation.getter(#largestDurationUnitStream),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Stream<void> get homeDateRangeStream => (super.noSuchMethod(
        Invocation.getter(#homeDateRangeStream),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i17.AppDurationUnit get largestDurationUnit => (super.noSuchMethod(
        Invocation.getter(#largestDurationUnit),
        returnValue: _i17.AppDurationUnit.days,
      ) as _i17.AppDurationUnit);

  @override
  _i3.DisplayDateRange get homeDateRange => (super.noSuchMethod(
        Invocation.getter(#homeDateRange),
        returnValue: _FakeDisplayDateRange_1(
          this,
          Invocation.getter(#homeDateRange),
        ),
      ) as _i3.DisplayDateRange);

  @override
  List<String> get statsSelectedActivityIds => (super.noSuchMethod(
        Invocation.getter(#statsSelectedActivityIds),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i3.DisplayDateRange get statsDateRange => (super.noSuchMethod(
        Invocation.getter(#statsDateRange),
        returnValue: _FakeDisplayDateRange_1(
          this,
          Invocation.getter(#statsDateRange),
        ),
      ) as _i3.DisplayDateRange);

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(#init, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void setLargestDurationUnit(_i17.AppDurationUnit? unit) => super.noSuchMethod(
        Invocation.method(#setLargestDurationUnit, [unit]),
        returnValueForMissingStub: null,
      );

  @override
  void setHomeDateRange(_i3.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(#setHomeDateRange, [range]),
        returnValueForMissingStub: null,
      );

  @override
  void setStatsSelectedActivityIds(List<String>? ids) => super.noSuchMethod(
        Invocation.method(#setStatsSelectedActivityIds, [ids]),
        returnValueForMissingStub: null,
      );

  @override
  void setStatsDateRange(_i3.DisplayDateRange? range) => super.noSuchMethod(
        Invocation.method(#setStatsDateRange, [range]),
        returnValueForMissingStub: null,
      );

  @override
  void setUserInfo(String? name, String? email) => super.noSuchMethod(
        Invocation.method(#setUserInfo, [name, email]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeviceInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoWrapper extends _i1.Mock implements _i18.DeviceInfoWrapper {
  MockDeviceInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue: _i8.Future<_i4.AndroidDeviceInfo>.value(
          _FakeAndroidDeviceInfo_2(this, Invocation.getter(#androidInfo)),
        ),
      ) as _i8.Future<_i4.AndroidDeviceInfo>);

  @override
  _i8.Future<_i4.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i8.Future<_i4.IosDeviceInfo>.value(
          _FakeIosDeviceInfo_3(this, Invocation.getter(#iosInfo)),
        ),
      ) as _i8.Future<_i4.IosDeviceInfo>);
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i19.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.PackageInfo> fromPlatform() => (super.noSuchMethod(
        Invocation.method(#fromPlatform, []),
        returnValue: _i8.Future<_i5.PackageInfo>.value(
          _FakePackageInfo_4(this, Invocation.method(#fromPlatform, [])),
        ),
      ) as _i8.Future<_i5.PackageInfo>);
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i20.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {#headers: headers, #body: body, #encoding: encoding},
        ),
        returnValue: _i8.Future<_i6.Response>.value(
          _FakeResponse_5(
            this,
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
          ),
        ),
      ) as _i8.Future<_i6.Response>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i7.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);

  @override
  _i7.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_6(this, Invocation.getter(#database)),
      ) as _i7.Database);

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<T> transaction<T>(
    _i8.Future<T> Function(_i7.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#transaction, [action], {#exclusive: exclusive}),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<T> readTransaction<T>(
    _i8.Future<T> Function(_i7.Transaction)? action,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#readTransaction, [action]),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(#readTransaction, [action]),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(#readTransaction, [action]),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<T> devInvokeMethod<T>(String? method, [Object? arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#devInvokeMethod, [method, arguments]),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(#devInvokeMethod, [method, arguments]),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(#devInvokeMethod, [method, arguments]),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(#devInvokeSqlMethod, [
                  method,
                  sql,
                  arguments,
                ]),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(#devInvokeSqlMethod, [
                method,
                sql,
                arguments,
              ]),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#execute, [sql, arguments]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#rawInsert, [sql, arguments]),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [table, values],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<List<Map<String, Object?>>>.value(
          <Map<String, Object?>>[],
        ),
      ) as _i8.Future<List<Map<String, Object?>>>);

  @override
  _i8.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#rawQuery, [sql, arguments]),
        returnValue: _i8.Future<List<Map<String, Object?>>>.value(
          <Map<String, Object?>>[],
        ),
      ) as _i8.Future<List<Map<String, Object?>>>);

  @override
  _i8.Future<_i7.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [sql, arguments],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i8.Future<_i7.QueryCursor>.value(
          _FakeQueryCursor_8(
            this,
            Invocation.method(
              #rawQueryCursor,
              [sql, arguments],
              {#bufferSize: bufferSize},
            ),
          ),
        ),
      ) as _i8.Future<_i7.QueryCursor>);

  @override
  _i8.Future<_i7.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i8.Future<_i7.QueryCursor>.value(
          _FakeQueryCursor_8(
            this,
            Invocation.method(
              #queryCursor,
              [table],
              {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset,
                #bufferSize: bufferSize,
              },
            ),
          ),
        ),
      ) as _i8.Future<_i7.QueryCursor>);

  @override
  _i8.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#rawUpdate, [sql, arguments]),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [table, values],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
        Invocation.method(#rawDelete, [sql, arguments]),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {#where: where, #whereArgs: whereArgs},
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i7.Batch batch() => (super.noSuchMethod(
        Invocation.method(#batch, []),
        returnValue: _FakeBatch_9(this, Invocation.method(#batch, [])),
      ) as _i7.Batch);
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i7.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);

  @override
  _i8.Future<List<Object?>> commit({
    bool? exclusive,
    bool? noResult,
    bool? continueOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#commit, [], {
          #exclusive: exclusive,
          #noResult: noResult,
          #continueOnError: continueOnError,
        }),
        returnValue: _i8.Future<List<Object?>>.value(<Object?>[]),
      ) as _i8.Future<List<Object?>>);

  @override
  _i8.Future<List<Object?>> apply({bool? noResult, bool? continueOnError}) =>
      (super.noSuchMethod(
        Invocation.method(#apply, [], {
          #noResult: noResult,
          #continueOnError: continueOnError,
        }),
        returnValue: _i8.Future<List<Object?>>.value(<Object?>[]),
      ) as _i8.Future<List<Object?>>);

  @override
  void rawInsert(String? sql, [List<Object?>? arguments]) => super.noSuchMethod(
        Invocation.method(#rawInsert, [sql, arguments]),
        returnValueForMissingStub: null,
      );

  @override
  void insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [table, values],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rawUpdate(String? sql, [List<Object?>? arguments]) => super.noSuchMethod(
        Invocation.method(#rawUpdate, [sql, arguments]),
        returnValueForMissingStub: null,
      );

  @override
  void update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [table, values],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rawDelete(String? sql, [List<Object?>? arguments]) => super.noSuchMethod(
        Invocation.method(#rawDelete, [sql, arguments]),
        returnValueForMissingStub: null,
      );

  @override
  void delete(String? table, {String? where, List<Object?>? whereArgs}) =>
      super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {#where: where, #whereArgs: whereArgs},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void execute(String? sql, [List<Object?>? arguments]) => super.noSuchMethod(
        Invocation.method(#execute, [sql, arguments]),
        returnValueForMissingStub: null,
      );

  @override
  void query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rawQuery(String? sql, [List<Object?>? arguments]) => super.noSuchMethod(
        Invocation.method(#rawQuery, [sql, arguments]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i4.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename => (super.noSuchMethod(
        Invocation.getter(#codename),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#codename),
        ),
      ) as String);

  @override
  String get incremental => (super.noSuchMethod(
        Invocation.getter(#incremental),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#incremental),
        ),
      ) as String);

  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#release),
        ),
      ) as String);

  @override
  int get sdkInt =>
      (super.noSuchMethod(Invocation.getter(#sdkInt), returnValue: 0) as int);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(#toMap, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i4.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AndroidBuildVersion get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _FakeAndroidBuildVersion_10(
          this,
          Invocation.getter(#version),
        ),
      ) as _i4.AndroidBuildVersion);

  @override
  String get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#board),
        ),
      ) as String);

  @override
  String get bootloader => (super.noSuchMethod(
        Invocation.getter(#bootloader),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#bootloader),
        ),
      ) as String);

  @override
  String get brand => (super.noSuchMethod(
        Invocation.getter(#brand),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#brand),
        ),
      ) as String);

  @override
  String get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#device),
        ),
      ) as String);

  @override
  String get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#display),
        ),
      ) as String);

  @override
  String get fingerprint => (super.noSuchMethod(
        Invocation.getter(#fingerprint),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#fingerprint),
        ),
      ) as String);

  @override
  String get hardware => (super.noSuchMethod(
        Invocation.getter(#hardware),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#hardware),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
      ) as String);

  @override
  String get manufacturer => (super.noSuchMethod(
        Invocation.getter(#manufacturer),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#manufacturer),
        ),
      ) as String);

  @override
  String get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#model),
        ),
      ) as String);

  @override
  String get product => (super.noSuchMethod(
        Invocation.getter(#product),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#product),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  List<String> get supported32BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported32BitAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get supported64BitAbis => (super.noSuchMethod(
        Invocation.getter(#supported64BitAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get supportedAbis => (super.noSuchMethod(
        Invocation.getter(#supportedAbis),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#tags),
        ),
      ) as String);

  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
      ) as String);

  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);

  @override
  List<String> get systemFeatures => (super.noSuchMethod(
        Invocation.getter(#systemFeatures),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get serialNumber => (super.noSuchMethod(
        Invocation.getter(#serialNumber),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#serialNumber),
        ),
      ) as String);

  @override
  bool get isLowRamDevice => (super.noSuchMethod(
        Invocation.getter(#isLowRamDevice),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(#toMap, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [IosDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIosDeviceInfo extends _i1.Mock implements _i4.IosDeviceInfo {
  MockIosDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get systemName => (super.noSuchMethod(
        Invocation.getter(#systemName),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#systemName),
        ),
      ) as String);

  @override
  String get systemVersion => (super.noSuchMethod(
        Invocation.getter(#systemVersion),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#systemVersion),
        ),
      ) as String);

  @override
  String get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#model),
        ),
      ) as String);

  @override
  String get modelName => (super.noSuchMethod(
        Invocation.getter(#modelName),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#modelName),
        ),
      ) as String);

  @override
  String get localizedModel => (super.noSuchMethod(
        Invocation.getter(#localizedModel),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#localizedModel),
        ),
      ) as String);

  @override
  bool get isPhysicalDevice => (super.noSuchMethod(
        Invocation.getter(#isPhysicalDevice),
        returnValue: false,
      ) as bool);

  @override
  bool get isiOSAppOnMac =>
      (super.noSuchMethod(Invocation.getter(#isiOSAppOnMac), returnValue: false)
          as bool);

  @override
  _i4.IosUtsname get utsname => (super.noSuchMethod(
        Invocation.getter(#utsname),
        returnValue: _FakeIosUtsname_11(this, Invocation.getter(#utsname)),
      ) as _i4.IosUtsname);

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(#toMap, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Session].
///
/// See the documentation for Mockito's code generation for more information.
class MockSession extends _i1.Mock implements _i14.Session {
  MockSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get activityId => (super.noSuchMethod(
        Invocation.getter(#activityId),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#activityId),
        ),
      ) as String);

  @override
  int get startTimestamp =>
      (super.noSuchMethod(Invocation.getter(#startTimestamp), returnValue: 0)
          as int);

  @override
  bool get isBanked =>
      (super.noSuchMethod(Invocation.getter(#isBanked), returnValue: false)
          as bool);

  @override
  int get millisecondsDuration => (super.noSuchMethod(
        Invocation.getter(#millisecondsDuration),
        returnValue: 0,
      ) as int);

  @override
  Duration get duration => (super.noSuchMethod(
        Invocation.getter(#duration),
        returnValue: _FakeDuration_12(this, Invocation.getter(#duration)),
      ) as Duration);

  @override
  _i9.TZDateTime get startDateTime => (super.noSuchMethod(
        Invocation.getter(#startDateTime),
        returnValue: _FakeTZDateTime_13(
          this,
          Invocation.getter(#startDateTime),
        ),
      ) as _i9.TZDateTime);

  @override
  _i10.TimeOfDay get startTimeOfDay => (super.noSuchMethod(
        Invocation.getter(#startTimeOfDay),
        returnValue: _FakeTimeOfDay_14(
          this,
          Invocation.getter(#startTimeOfDay),
        ),
      ) as _i10.TimeOfDay);

  @override
  bool get inProgress =>
      (super.noSuchMethod(Invocation.getter(#inProgress), returnValue: false)
          as bool);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(this, Invocation.getter(#id)),
      ) as String);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(#toMap, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  int compareTo(_i14.Session? other) => (super.noSuchMethod(
        Invocation.method(#compareTo, [other]),
        returnValue: 0,
      ) as int);
}
